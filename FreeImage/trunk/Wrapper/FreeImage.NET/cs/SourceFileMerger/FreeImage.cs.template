// ==========================================================
// FreeImage 3 .NET wrapper
// Original FreeImage 3 functions and .NET compatible derived functions
//
// Design and implementation by
// - Jean-Philippe Goerke (jpgoerke@users.sourceforge.net)
// - Carsten Klein (cklein05@users.sourceforge.net)
//
// Contributors:
// - David Boland (davidboland@vodafone.ie)
//
// Main reference : MSDN Knowlede Base
//
// This file is part of FreeImage 3
//
// COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN "AS IS" BASIS, WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES
// THAT THE COVERED CODE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE
// OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED
// CODE IS WITH YOU. SHOULD ANY COVERED CODE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT
// THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY
// SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL
// PART OF THIS LICENSE. NO USE OF ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
//
// Use at your own risk!
// ==========================================================

// ==========================================================
// To build the project without VS use the following commandline:
// "csc.exe /out:FreeImageNET.dll /target:library /doc:FreeImageNET.XML /debug- /o /nowarn:659,660,661,1591 /unsafe+ /filealign:512 FreeImage.cs"
// ==========================================================

using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Resources;

/////////////////////////////////////////////////////
//                                                 //
//              Assembly Attributes                //
//                                                 //
/////////////////////////////////////////////////////

#include "Properties\AssemblyInfo.cs"

/////////////////////////////////////////////////////
//                                                 //
//              FreeImage.h import                 //
//                                                 //
/////////////////////////////////////////////////////

namespace FreeImageAPI
{
	#region Structs

	// FIBITMAP, FIMULTIBITMAP, FIMEMORY, FIMETADATA and FITAG are wrapped pointers.
	// The strcutures contain a single IntPtr wrapping the unmanaged memory address.
	// The structures implement conversions between Int and IntPtr and the 'Equals'
	// method.
	// The 'IsNull' property allows a null-pointer check.

#include "Structs\FIBITMAP.cs"

#include "Structs\FIMULTIBITMAP.cs"

#include "Structs\FIMEMORY.cs"

#include "Structs\FIMETADATA.cs"

#include "Structs\FITAG.cs"

#include "Structs\FreeImageIO.cs"

	// Bitmaps are made up of different structures.
	// Some bitmaps have palettes that define the used colors and the bitmaps real
	// data links to the palette index.
	// Others don't have a palette and each pixel is stored directly.
	//
	// No matter which type of bitmap is accessed FreeImage provides pointers to
	// beginning of a structure and its length.
	// In unmanaged code pointers would be used to access the data. In .NET
	// unsafe code is needed to that.
	//
	// RGBQUAD, RGBTRIPLE, FIRGB16, FIRGBA16, FIRGBF and FIRGBAF represent
	// the structures that bitmaps use to store their data.
	// Its up to the coder to choose the right one.
	//
	// Each structure can be converted from and to the .NETs structure 'Color'.

#include "Structs\RGBQUAD.cs"

#include "Structs\RGBTRIPLE.cs"

#include "Structs\FIRGBA16.cs"

#include "Structs\FIRGB16.cs"

#include "Structs\FIRGBAF.cs"

#include "Structs\FIRGBF.cs"

#include "Structs\FICOMPLEX.cs"

#include "Structs\BITMAPINFOHEADER.cs"

#include "Structs\BITMAPINFO.cs"

#include "Structs\FIICCPROFILE.cs"

#include "Structs\Plugin.cs"

	#endregion

	#region Enums

#include "Enumerations\FREE_IMAGE_FORMAT.cs"

#include "Enumerations\FREE_IMAGE_TYPE.cs"

#include "Enumerations\FREE_IMAGE_COLOR_TYPE.cs"

#include "Enumerations\FREE_IMAGE_QUANTIZE.cs"

#include "Enumerations\FREE_IMAGE_DITHER.cs"

#include "Enumerations\FREE_IMAGE_JPEG_OPERATION.cs"

#include "Enumerations\FREE_IMAGE_TMO.cs"

#include "Enumerations\FREE_IMAGE_FILTER.cs"

#include "Enumerations\FREE_IMAGE_COLOR_CHANNEL.cs"

#include "Enumerations\FREE_IMAGE_MDTYPE.cs"

#include "Enumerations\FREE_IMAGE_MDMODEL.cs"

#include "Enumerations\FREE_IMAGE_LOAD_FLAGS.cs"

#include "Enumerations\FREE_IMAGE_SAVE_FLAGS.cs"

#include "Enumerations\ICC_FLAGS.cs"

	#endregion

	#region Delegates

#include "Delegates.cs"

	#endregion

#include "FreeImageStaticImports.cs"
}

/////////////////////////////////////////////////////
//                                                 //
//               Wrapper functions                 //
//                                                 //
/////////////////////////////////////////////////////

namespace FreeImageAPI
{
	#region Structs

	// RGBQUADARRAY, RGBTRIPLEARRAY, FIRGB16ARRAY, FIRGBFARRAY and FIRGBAFARRAY
	// are structures that wrap a block of memory. Each structure has its own
	// definitions (size, color position ect).
	//
	// In unmanaged code pointers would be used to access a bitmaps data.
	// In .NET unsafe code is needed to perform the same operations.
	// All mentioned structures have the same core methods and properties.
	// They return Colors or the original structure (RGBQUADARRAY returns
	// RGBQUADs ect) that can be altered and then saved back to the bitmap
	// (always keep in mind, that the structure returns a copy of the block
	// of memory; any change made to it must be saved back or will be lost).
	//
	// These structures provide a comfortable way of accessing a bitmaps data.
	// The structure is defined by the base address of the memory-block to wrap
	// and the !number of elements! the block contains, not the size of the block
	// in bytes.
	// Keep in mind that the structure accepts any length and can be used to
	// write in memory that does not belong to the bitmap, which will lead to
	// data loss.

#include "Structs\RGBQUADARRAY.cs"

#include "Structs\RGBTRIPLEARRAY.cs"

#include "Structs\FIRGBA16ARRAY.cs"

#include "Structs\FIRGB16ARRAY.cs"

#include "Structs\FIRGBAFARRAY.cs"

#include "Structs\FIRGBFARRAY.cs"

#include "Structs\BitSettings.cs"

#include "Structs\FI16RGB.cs"

#include "Structs\FI16RGBARRAY.cs"

#include "Structs\FI8BITARRAY.cs"

#include "Structs\FI4BITARRAY.cs"

#include "Structs\FI1BITARRAY.cs"

#include "Structs\FIRational.cs"

#include "Structs\FIURational.cs"

#include "Structs\fi_handle.cs"

	#endregion

	#region Classes

#include "Classes\LocalPlugin.cs"

#include "Classes\FreeImageStreamIO.cs"

#include "Classes\StreamWrapper.cs"

#include "Classes\MetadataTag.cs"

#include "Classes\MetadataModel.cs"

	#region Metadata Models

	#include "Classes\MetadataModels.cs"

	#endregion

#include "Classes\ImageMetadata.cs"

	#endregion

	#region Enums

#include "Enumerations\FREE_IMAGE_COLOR_DEPTH.cs"

#include "Enumerations\FREE_IMAGE_COMPARE_FLAGS.cs"

#include "Enumerations\MD_SEARCH_FLAGS.cs"

#include "Enumerations\FREE_IMAGE_METADATA_COPY.cs"

	#endregion

#include "FreeImageWrapper.cs"
}